@model EsselTestLocalApplication.Models.HR.EmpDocument
<div class="modal-dialog modal-lg">
    <!-- Modal content-->
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <h4 class="modal-title">Upload Documents</h4>
        </div>
        <div class="modal-body" style="overflow-x:hidden">
            @*<div class="row">*@
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DocName)<span style="color:red">*</span>
                            @*@Html.TextBoxFor(model => model.DocName, htmlAttributes: new { @class = "form-control", @id = "txtDocName", onkeypress = "return isValidSpecialCharacters(event)" })*@
                            @Html.DropDownListFor(model => model.DocName, new SelectList(Model.EmpDocumentslst, "DocumentName", "DocumentName"), "-Please Select-", htmlAttributes: new { @class = "form-control dropdown-toggle", @id = "ddlNDocumentName" })

                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="control-label">Select File(jpg/png/pdf)</label><span style="color:red">*</span>
                            <input type="file" class="form-control col-md-2" title="search image" id="DocumentId" name="file" onchange="show(this)" accept="image/jpeg,image/png,application/pdf" />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="row">
                            <div class="form-group">
                                <img id="user_img" height="170" width="170" />
                            </div>
                        </div>
                    </div>

                </div>
                <div class="row text-right">
                    <button class="btn btn1 btn-success" id="btnewDocSubmit" onclick="SubmitNewEmpDoumentData()">Submit</button>
                    <button class="btn btn1 btn-success" id="btnewnewDocReset" onclick="ClearNewDocumentModel()">Reset</button>

                </div>
                <div class="row">
                    <div class="col-md-12">
                        <br />
                        <div class="text-center">
                            <div id="divAddNewDocInfoMsg" class="alert alert-danger hidden">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <input type="hidden" id="txturl" />
                    <input type="hidden" id="txtPDFBase" />
                </div>
            @*</div>*@
            <div class="row" style="height:700px!important">
                <div class="col-md-2">  </div>
                    <div class="col-md-9">
                        <embed type="application/pdf" id="user_pdf" style="width:100%;height:700px" />
                    </div>
                </div>
            <div class="col-md-1">  </div>
                </div>
            </div>
</div>
@*<img src="data:image/jpg;base64,@item.DocBinaryData" style="height:100px;width:100px;" />*@
<script>
    function show(input) {
        var filePath = input.value;
        //debugger;
        // Allowing file type
        //var allowedExtensions =/(\.jpg|\.jpeg|\.png|\.pdf)$/i;
        fileName = document.querySelector('#DocumentId').value;
        var extension = filePath.split('.').pop();
        //alert(extension);
        if (extension === "png" || extension === "jpg" || extension === "jpeg" || extension === "pdf" || extension === "PNG") {
            if (input.files && input.files[0]) {
                var numb = input.files[0].size / 1024 / 1024;
                numb = numb.toFixed(2);
                if (numb > 2) {
                  //  alert('to big, maximum is 2MiB. You file size is: ' + numb + ' MiB');
                    $("#divAddNewDocInfoMsg").text("");
                    $("#divAddNewDocInfoMsg").append("<div>file size Should Not Exceed 2MB</div>");
                    $("#divAddNewDocInfoMsg").addClass("alert-danger");
                    $("#divAddNewDocInfoMsg").removeClass("hidden alert-success");
                    //alert('Invalid file type');
                    return false;
                } else {
                    //alert('it okey, your file has ' + numb + 'MiB')
                    $("#divAddNewDocInfoMsg").text("");
                    $("#divAddNewDocInfoMsg").addClass("hidden");
                    var filerdr = new FileReader();
                    filerdr.onload = function (e) {
                        //$('#user_img').attr('src', e.target.result);
                        if (extension === "png" || extension === "jpg" || extension === "jpeg" || extension === "PNG") {
                            $('#user_img').attr('src', e.target.result);
                            $("#txtPDFBase").val(e.target.result);
                        }
                        else {
                            $('#user_pdf').attr('src', e.target.result);
                            $("#txtPDFBase").val(e.target.result);
                        }                        
                    }
                    filerdr.readAsDataURL(input.files[0]);
                    $("#txturl").val(URL.createObjectURL(input.files[0]));
                }
            }
            $("#divAddNewDocInfoMsg").text("");
            $("#divAddNewDocInfoMsg").addClass("hidden");
        }
        else {           
            $('#user_img').attr('src', "");
            $('#user_pdf').attr('src', "");
            input.value = '';
            $("#divAddNewDocInfoMsg").text("");
            $("#divAddNewDocInfoMsg").append("<div>Invalid File</div>");
            $("#divAddNewDocInfoMsg").addClass("alert-danger");
            $("#divAddNewDocInfoMsg").removeClass("hidden alert-success");
            //alert('Invalid file type');
            return false;
        }
    }
    function getBase64Image(img) {
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        var dataURL = canvas.toDataURL("image/png");
        return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");
    }
    function base64ToByteArray(base64String) {
        try {
            var sliceSize = 1024;
            var byteCharacters = atob(base64String);
            var bytesLength = byteCharacters.length;
            var slicesCount = Math.ceil(bytesLength / sliceSize);
            var byteArrays = new Array(slicesCount);

            for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {
                var begin = sliceIndex * sliceSize;
                var end = Math.min(begin + sliceSize, bytesLength);

                var bytes = new Array(end - begin);
                for (var offset = begin, i = 0; offset < end; ++i, ++offset) {
                    bytes[i] = byteCharacters[offset].charCodeAt(0);
                }
                byteArrays[sliceIndex] = new Uint8Array(bytes);
            }
            return byteArrays;
        } catch (e) {
            console.log("Couldn't convert to byte array: " + e);
            return undefined;
        }
    }
    function SubmitNewEmpDoumentData() {
        isValid = true;
        var errorMsg = "";
        if (imgpath == "" || imgpath === null) {
            errorMsg += "<p style='margin-top:-5px!important;'>Select File</p>";
            isValid = false;
        }
        if ($("#ddlNDocumentName option:selected").index() === 0) {
            errorMsg += "<p style='margin-top:-5px!important;'>Enter File Name</p>";
            isValid = false;
        }
        if ($("#txturl").val() == "") {
            errorMsg += "<p style='margin-top:-5px!important;'>Select File</p>";
            isValid = false;
        }
        if (!isValid) {
            var finalerror1 = "<div style='align:center'><p>Please enter all required fields!</p>";
            $("#divAddNewDocInfoMsg").text("");
            $("#divAddNewDocInfoMsg").append(finalerror1 + errorMsg + "</div>");
            $("#divAddNewDocInfoMsg").addClass("alert-danger");
            $("#divAddNewDocInfoMsg").removeClass("hidden alert-success");
            return false;
        }
        else {
            $("#divAddNewDocInfoMsg").text("");
            $("#divAddNewDocInfoMsg").addClass("hidden");
          
            var imgpath = $("#DocumentId").val(); var imgbytes = "", filetype = "", saveData = {};
           fileName = document.querySelector('#DocumentId').value;
           var extension = fileName.split('.').pop();
           if (extension === "png" || extension === "jpg" || extension === "jpeg" || extension === "PNG") {
                if (imgpath !== null || imgpath !== "") {
                    var myCanvas = $('<canvas/>');
                    var myImageSrc = myCanvas.attr('src', imgpath);
                    myCanvas.attr('src', myImageSrc);
                    var dataInBase64 = $(myCanvas)[0].toDataURL('image/png').replace(/data\:image\/png;base64,/, '');
                    //var dataInBase64 = $("#txtPDFBase").val();
                    imgbytes = binEncode(dataInBase64);
                    console.log(imgbytes);
                    filetype = "Image";
                    let DocName = $('#ddlNDocumentName option:selected').val();
                    let DocBinaryData = imgbytes;
                    let Path = $("#txturl").val();
                    let FileType = filetype;
                   // debugger;
                    var base641 = $("#txtPDFBase").val();
                    console.log(base641);
                    var parts1 = base641.split(";base64,");
                    var contentType1 = parts1[0].replace("data:", "");
                    var base64new1 = parts1[1];
                    var byteArray1 = base64ToByteArray(base64new1);
                    $("#divAddNewEmpInfoMsg").text("");
                    $("#divAddNewEmpInfoMsg").addClass("hidden");
                    addFailMsg = "Error Occurred While Adding.";
                    $.ajax({
                        type: 'POST',
                        dataType: 'json',
                        url: '/HR/StoreDocuments',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ Pdfbase64: base64new1, name: DocName, path: Path, filetype: FileType }), 
                        success: function (Data) {
                            console.log(Data);
                            if (Data === "Submited") {
                                $("#divAddNewDocInfoMsg").text("Added Successfully");
                                $("#divAddNewDocInfoMsg").removeClass("hidden alert-danger");
                                $("#divAddNewDocInfoMsg").addClass("alert-success");
                            }
                            else {
                                $("#divAddNewDocInfoMsg").text("Document Already Exist");
                                $("#divAddNewDocInfoMsg").addClass("alert-danger");
                                $("#divAddNewDocInfoMsg").removeClass("hidden alert-success");
                            }
                            $("#btnewDocSubmit").prop('disabled', false);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {                           
                            $("#divAddNewDocInfoMsg").text(addFailMsg);
                            $("#divAddNewDocInfoMsg").addClass("alert-danger");
                            $("#divAddNewDocInfoMsg").removeClass("hidden alert-success");
                            $("#btnewDocSubmit").prop('disabled', false);
                        }
                    });
                }
            }
           else {
              // filetype = "PDF";
               var base64 = $("#txtPDFBase").val();
               console.log(base64);
               var parts = base64.split(";base64,");
               var contentType = parts[0].replace("data:", "");
               var base64new = parts[1];
               var byteArray = base64ToByteArray(base64new);
               console.log(byteArray);
              
               let DocName = $('#ddlNDocumentName option:selected').val();
               let DocBinaryData = imgbytes;
               let Path = $("#txturl").val;
               let FileType = "PDF";
               let PDFBaseData = base64new;
               $("#divAddNewEmpInfoMsg").text("");
               $("#divAddNewEmpInfoMsg").addClass("hidden");
               addFailMsg = "Error Occurred While Adding.";
               $.ajax({
                   type: 'POST',
                   dataType: 'json',
                   url: '/HR/StoreDocuments',
                   contentType: "application/json; charset=utf-8",
                   data: JSON.stringify({ Pdfbase64: base64new, name: DocName, path: Path, filetype: FileType }),
                   success: function (Data) {
                       if (Data === "Submited") {
                           $("#divAddNewDocInfoMsg").text("Added Successfully");
                           $("#divAddNewDocInfoMsg").removeClass("hidden alert-danger");
                           $("#divAddNewDocInfoMsg").addClass("alert-success");
                       }
                       else {
                           $("#divAddNewDocInfoMsg").text("Document Already Exist");
                           $("#divAddNewDocInfoMsg").addClass("alert-danger");
                           $("#divAddNewDocInfoMsg").removeClass("hidden alert-success");
                       }
                       $("#btnewDocSubmit").prop('disabled', false);
                   },
                   error: function (XMLHttpRequest, textStatus, errorThrown) {
                       $("#divAddNewDocInfoMsg").text(addFailMsg);
                       $("#divAddNewDocInfoMsg").addClass("alert-danger");
                       $("#divAddNewDocInfoMsg").removeClass("hidden alert-success");
                       $("#btnewDocSubmit").prop('disabled', false);
                   }
               });
           }
       
         

           
        }

    }
    function binEncode(data) {
        var binArray = []
        var datEncode = "";

        for (i = 0; i < data.length; i++) {
            binArray.push(data[i].charCodeAt(0).toString(2));
        }
        for (j = 0; j < binArray.length; j++) {
            var pad = padding_left(binArray[j], '0', 8);
            datEncode += pad + ' ';
        }
        function padding_left(s, c, n) {
            if (!s || !c || s.length >= n) {
                return s;
            }
            var max = (n - s.length) / c.length;
            for (var i = 0; i < max; i++) {
                s = c + s;
            } return s;
        }

        return binArray;
    }
    function ClearNewDocumentModel() {
        //location.reload();
        $('#user_img').attr('src', "");
        $('#user_pdf').attr('src', "");
        $('#DocumentId').val("");
        $("#ddlNDocumentName").prop('selectedIndex', 0); 
        $('#btnewDocSubmit').prop('selectedIndex', 0);
        $('#txtPDFBase').val("");
        $('#txturl').val("");
        $("#divAddNewDocInfoMsg").text("");
        $("#divAddNewDocInfoMsg").addClass("hidden");
    }
</script>